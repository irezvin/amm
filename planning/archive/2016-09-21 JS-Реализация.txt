2016-09-21
==========

Js-реализация связанных моделей

Я не пишу js-фреймворк (удобный для разработчика).
Я придумываю движок, исходные данные для которого можно декларативно передать с сервера.

Emitter
    -   передает сигналы
    
Receiver 
    -   получает сигналы

Property
    -   принимает сигналы
            set 
    -   передает сигналы
            change
    
Record
    -   запись с полями
    -   что передает?
        -   propertiesChanged
        -   что угодно другое
    -   свойство может также иметь тип Record
            
List
    -   числовой массив
    -   что передает? 
        -   itemsAdded
        -   itemsDeleted
        -   itemsReplaced
        -   itemsChanged
    -   унаследован от Record и может иметь любые properties

Handler (data)
    -   data->set
    -   data->fn->set
    -   data->fn

2016-09-22
==========
    
Translator
    -   содержит правила, по которым назначаются Handler'ы
        а) Model A - Model A
        б) Model A - Model B
        
Adapter
    -   привязывает Model к внешней системе (например,
        View Model к DOM)
        
В любой момент обработчик может прервать выполнение для осуществления асинхронной операции,
но я не знаю, должно ли это сопровождаться какими-то библиотечными средствами.

Например,

    Promise
        -   сигнал или условие успеха/провала
            -   succeed()
            -   fail()
        -   действие в случае успеха -> передать сигнал
        -   действие в случае ошибки -> передать сигнал
        
Кроме того, у любого Object или List есть свойство "заблокирован" и модель интерфейса может,
в свою очередь, блокироваться, пока объекты, которые им наблюдаются, заблокированы. 
(например, на время выполения асинхронной операции).

Adapter создает свойства модели "on-demand", по мере того, как Translator или Handler
обращаются к ним. Например, если мы обратились 

    viewModel->getProperty('controls.email.domEditor.htmlAttributes.maxLength')
    
то будут созданы все недостающие звенья (domEditor, htmlAttributes, maxLength).
    

Требование:
    -   Структура моделей А и Б, а также правила Translator'а должны легко передаваться
        в формате JSON, или близком к нему, с сервера.
    -   Эта структура может дополняться или видоизменяться в ходе последующих запросов.
        -   получается, если какое-то правило Translator'а изменилось, нужно "перепривязать"
            соответствующие модели друг к другу.
    -   У Translator'а должны быть правила, что делать с ViewModel, если элементы
        DataModel, к которым они были привязаны, исчезли или появились.
        
2016-09-24
==========
TODO: придумать формат UIDefs
** Думаем над форматом UIDefs
    
