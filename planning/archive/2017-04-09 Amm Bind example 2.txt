Как мы указываем элементы

Проблема: фрагментированность и хаотичность.

Проблема: спецификаторы могут меняться со временем и становиться 
    -   действительными
    -   недействительными
    -   указывать уже на другие элементы, а не на те, что раньше

Проблема: неоднозначность спецификаторов (например, они указывают на несколько элементов).
    Иногда в этом есть абсолютно "легитимный" смысл, например, у нас есть множество "компонентов", которые
    должны похоже себя вести.

        Но для этого лучше и определять _компоненты_, нет?

а)  path никто не отменял
    
    ^/foo/bar   -   всегда уникальное, если нашло (т.к. ^ - это глобальный root)
    /foo/bar -  ??? - не присоединенные к глобальному root?
    foo/bar - любой bar, находящийся в foo, на любом уровне - вообще смысла никакого?

б)  вариант: использовать scopes

    appliance: batterySize - соответствует любому элементу с id "batterySize" внутри любого элемента со scope "appliance"
    при этом scope действует при определении правил так (псевдокод):
        
        ruleset 
            scope: appliance
            in: type === laptop
            out: batterySize.enabled
        
        ruleset может применяться к любому количеству найденных scope до тех пор, пока in: внутри каждого scope однозначно
        идентифицирует свойство одного элемента.

        А как быть, если scope есть в scope?

При этом если мы ссылаемся из элемента на элемент, то выше scope мы не ищем:

    <fieldset data-amm-scope="appliance" data-amm-bind="class:pricey := {{price}} > 100">
        Type: <input name="type" data-amm-trait="field" />
        Price: <input name="price" data-amm-trait="field" />
        Battery Size: <input name="batterySize" data-amm-bind="enabled := {{type}} === 'laptop'" />
    </fieldset>

    ..  либо ищем в scope более высокого уровня, но не погружаясь в scope более низкого?
        
appliance:type


