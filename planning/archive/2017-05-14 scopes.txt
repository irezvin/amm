2017-05-14 scopes
=================

План
----

Amm.Trait.Scope

scopeId
internalId - идентификатор, по которому данный элемент доступен изнутри 
собственного scope

scopes - основа для инкапсуляции элементов

поиск осуществляется 
    -   в том же scope, что и текущий элемент
    -   во внешних scope
    -   поиск не осуществляется в дочерних scopes
    -   что будет, если в scope есть несколько элементов с одинаковыми 
        идентификаторами? будет возвращаться массив?

я могу указывать, в каком scope искать: 
    scope::foo
    scope::foo/bar - потомок bar в элементе foo
    foo - ищем где угодно в scope текущего элемента (но не в scope-потомках)
    . - текущий элемент (если отдельный сегмент)    
    .x - свойство x текущего элемента
    .x() - метод элемента?
    .x:y - свойство x, полученное при помощи getX(y);
        устанавливается setX(value, y)
        обработчик change тот же самый
        
    @y - событие у
    в перспективе везде вместо идентификаторов можно указывать {{xxx}} - это выражение, 
    значение которого используется в качестве идентификатора

задачи обработчиков (Handlers): реакция на события
    -   обновление свойства при изменении другого свойства
        -   присваивание
        -   декоратор
        -   javascript-код
    -   обновление свойства при определенных событиях
    -   вызов определенных методов при определенных событиях
                
свойство := источник ## декоратор @@ доп. события (через запятую)
событие (парам, парам): javascript-код

Amm.Path
    -   это "путь", состоящий из сегментов, при этом 
        -   сегменты могут быть "путём"
        -   path подписывается на onchange каждого сегмента
        -   если onchange в любом сегменте срабатывает, 
            то вся цепочка подписок обновляется
        -   можно также включать автоматическое обновление (по таймеру)

Amm.Handler
    -   содержит любое количество путей-источников
    -   генерирует значение
    
    var a = {{spec}}; var b = {{spec}}; {{spec}}.fn(a, b)


TODO
----

+   Scope
    +   Composite делаем Trait'ом
    +   делаем Component (теперь; вместо Scope) // 2017-05-30
        
-   Amm.get
-   Amm.Path
-   Amm.Hanlder
