2021-10-14: Amm.ArrayMapper.reuseInstances

(скорее всего, речь идет об Instantiator.reuseInstances)

-   Сейчас ArrayMapper сначала удаляет старые, потом создает новые
-   Нужно среди старых найти те, которые можно reuse 
    -   если instantiator не используется, не делаем
    -   должен совпадать filterResult
-   Удалять те, которые нельзя повторно использовать
-   Создавать те, которые можно
-   Остальные переассоциировать 

В пользу instantiator говорит то, что он "знает", как переассоциировать, 
и в нем можно инкапсулировать более сложную логику повторного использования; плюс не придется
менять текущую логику ArrayMapper'а, которая и так мозгодробительная.

    -   это делал instantiator 
    -   может пусть он и решает, можно ли повторно использовать?
        -   instantiator.beginUpdate
        -   instantiator.destruct - если было beginUpdate, то instance отмечается для удаления
        -   instantiator.constructInstance - будет пытаться повторно использовать те, которые были
            помечены для удаления
        -   instantiator.endUpdate - если финальное, то действительно cleanup'им все экземпляры

-   Array: добавить новые события

    -   spliceInfo: как splice, но есть доп параметр 
        spliceInfo
            insert   [ insertIndex, insertIndex, ... ]
            cut      [ cutIndex, cutIndex, ... ]
            reinsert [ [cutIndex, insertIndex], ... ]
            
    -   pan:
        когда мы убрали элементы с одного конца (точно удалили, не reinsert),
        и добавили с другого (точно добавили, не reinsert),
        а какое-то количество элементов посередине осталось без изменений
        -   cutFromEnd: true/false 
            -   true:  элементы были удалены с конца, добавлены в начало
            -   false: наоборот
        -   cut: [ item, item... ] - удаленные элементы
        -   insert: [ item, item... ] - добавленные элементы
        