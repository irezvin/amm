Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.6
Creation-Date: 2020-09-21T16:13:43+03:00

====== options ======
Created Monday 21 September 2020

Создание объектов в Amm неразрывно связано с их конфигурированием. У объекта, который мы создали, нужно установить свойства в нужные значения, а также назначить обработчики событий и связать этот объект с другими объектами.

===== Параметр //options// в типовом конструкторе Amm.<className>(//options//) =====

Большинство конструкторов в Amm принимают хеш "опций", то есть пар property: value, которые устанавливаются при инициализации.

'''
var options = {
	prop1: value1, 
	prop2: value2,
	on__someEvent: function() { /* ... */ },
	_doOnSomething: function() {
		Namespace.SomeClass.prototype.call(this);
		// extra code
	}
};
var Instance = new Namespace.SomeClass(options);
'''


Даже те конструкторы, которые допускают другие наборы параметров, в большинстве случаев проверяют стандартную форму вызова (один параметр - объект) - например, Amm.Expression:

''var expr = new Amm.Expression("'Number of products: ' + this.component.products.length", this);''

аналогично следующему коду:

'''
var expr = new Amm.Expression({
	src: "'Number of products: ' + this.component.products.length",
	expressionThis: this
});
'''


**Важно: порядок установки свойств обычно такой, в котором они перечислены в массиве options.** 

Хотя в Amm инициализация объектов, по возможности, сделана так, чтобы не зависеть от порядка установки свойств, но в отдельных случаях порядок инициализации может иметь значение.

Если конструктору нужно определить свой порядок назначения свойств, осуществляется инициализация по частям (т.е. конструктор вызывает Amm.init() сначала с одним набором опций или с параметром propNames, затем с другим).

Для установки опций в конструкторе вызывается метод Amm.init().

Также в массиве опций в конструкторе можно переопределять //методы//, в т.ч. частные; это сделано для упрощения мелких, сделанных "на месте" изменений в поведение стандартных классов.

==== Специальные ключи в options, используемые только конструктором ====

Ряд классов (в основном это Amm.WithEvents и Amm.Element) поддерживают специальные опции, которые не имеют соответствующих свойств, и устанавливаются только в конструкторе.

 У Amm.WithEvents это ключи ''on__<event>''; у Amm.Element это еще Traits, определяющий навыки элемента и действующий при создании; Views для определения представлений (на самом деле представления могут передавать информацию о требуемых навыках и автоматически назначать их элементу); ''prop__<property>'' или ''props: {property: value}'' -  для создания свойств; exprproperty для создания вычисляемых свойств; ''in__<property>: expression'', ''sync__<property>: expression'' для создания входных и двусторонних выражений. Подробная информация обо всех этих опциях описана в Amm.Element.

===== Amm.init: function(object, options, propNames, noSuchPropertyCallback) =====
Устанавливает свойства либо публичные переменные объекта **object** из набора пар **property: value** объекта **options**. Также позволяет добавить новые //методы// либо переопределяет существующие (как публичные, так и защищенные).

* **object**: object - объект, свойства которого нужно установить 
* **options**: object - объект с опциями (пары свойство-значение) {key: value}
	* key: имя свойства (должен быть setter либо имя публичного члена)
	* value: значение свойства
* **propNames**: undefined|Array - устанавливает только свойства с именами из массива propNames, при этом удаляя их (delete) из хеша options. Это разрушающий метод, применяемый для того, чтобы в начале конструктора установить ряд свойств, и при следующем прогоне их уже не устанавливать, поэтому в конструкторе, который использует //Amm.init()// с propNames, рекомендуется в начале клонировать массив options при помощи ''Amm.extend({}, options)'' и работать уже с клоном.
* **noSuchPropertyCallback**: object|function(key, value) - функция, которая будет вызвана (с this := object) в случае, если такого свойства (члена или setter'а) нет; если она вернет true, то исключение не будет сгенерировано

Исключения генерируются в случаях, если
* свойства (члена или setter'а) нет в объекте object, и значение - не функция
* свойство начинается с "_", и значение - не функция

Если значение - функция,  то свойство назначается (как правило, это член-функция) не зависимо от того, была функция с таким ключом в объекте раньше, или нет, "защищенная" она (начинается с "_") или нет. Это сделано для того, чтобы "на коленке" (ad-hoc) менять поведение объектов. Так как передать функции через json или relaxed json невозможно, это достаточно безопасный метод.

==== Примеры использования Amm.init ====

Ниже приведен намеренно идиотский пример класса "мебель" с тремя свойствами: тип (стол или стул), ширина и высота в миллиметрах. Ширина меньше 500 может быть только у стульев, а высота больше 800 - только у столов. Проверка сделана в setter'ах. Поскольку нам нужно знать тип до назначения ширины или высоты, мы вызываем init два раза: сначала только для типа, затем - для всего остального (так как первый вызов разрушающий, мы предварительно клонируем объект). Чтобы упростить код и не приходилось делать повторные проверки при изменении type, мы даем установить type только один раз.

'''
var Furniture = function(options) {
	if (!options) return;
	if (typeof options !== 'object') 
		throw Error("`options` must be an object");
	
	// делаем глубокую копию
	var appliedOptions = Amm.clone({}, options); 

	// вначале инициализируем свойство type
	Amm.init(this, appliedOptions, ['type']); 
	
	// тот же массив, но уже без type - инициализируем 
	// остальные свойства
	Amm.init(this, appliedOptions); 
}

Furniture.prototype = {
	'Furniture': '__CLASS__';
}

Amm.createProperty(Furniture.prototype, 'type', undefined, function(type) {
	if (this.type && this.type !== type)
		throw Error("Can set furniture type only once");
	if (type !== 'chair' && type !== 'table')
		throw Error("`type` must be either 'chair' or 'table');
}, true);

Amm.createProperty(Furniture.prototype, 'width', undefined, function(width) {
	if (this.type !== 'chair' && width < 500)
		throw Error("Only chair width can be less than 500");
});
Amm.createProperty(Furniture.prototype, 'height', undefined, function(height) {
	if (this.type !== 'table' && height > 800)
		throw Error("Only table can be higher than 800");
'''


'''
});

var chair = new Furniture ({height: 300, width: 400, type: 'chair'});
var table = new Furniture ({width: 600, height: 900, type: 'table'});

'''
**TODO: сделать Amm.init(), Amm.WithEvents() и подобные функции без побочных эффектов (точнее, клонировать только раз, и только когда разрушение понадобилось). После этого обновить документацию.**
