Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.6
Creation-Date: 2020-10-05T22:06:34+03:00

====== Стандартный способ создания объектов (Amm.constructInstance) ======
Created понеділок 05 жовтня 2020

Как было описано [[options|здесь]], большинство конструкторов в Amm и решениях на базе Amm могут принимать хеш options со значениями свойств, которые устанавливаются при создании (учитывая, что многие классы унаследованы от WithEvents, то и обработчики событий тоже).

Если в options добавить ключ ''class'', который бы позволял найти конструктор объекта, то массив options становится полноценным определением объекта. Это и сделано в методах //Amm.constructInstance()// и //Amm.constructMany()//.

Здесь важно отличать опции и экземпляр класса.

**Опции **- это объект options с, возможно, свойством class, указывающим на конструктор.
**Экземпляр класса** - это уже готовый результат работы конструктора, для которого Amm.getClass(instance) возвращает непустой результат.

(В названиях свойств и методов Amm также часто встречается термин "prototype", обычно он означает options с class, а не прототип javascript, если не оговорено иное).

===== Amm.constructInstance: function(options, baseClass, defaults, setToDefaults, requirements) =====

Создает и конфигурирует экземпляр по описанию-хешу options и/или убеждается, что экземпляр класса соответствует необходимым требованиям. 

Возвращает созданный/переданный экземпляр либо выбрасывает исключение.

* **options**:  object|string - опции будущего экземпляра, экземпляр класса либо имя класса. 
	* Если предоставлена строка, то это аналогично значению { class: options }, то есть строка интерпретируется как имя класса. 
	* Если options это экземпляр, то конструктор не вызывается, а лишь производится установка defaults - свойств по умолчанию - и проверка требований
* **baseClass**: undefined|function|string - конструктор по умолчанию / обязательный базовый класс
	* если options.class не задан, создается экземпляр класса baseClass;
	* созданный или предоставленный экземпляр проверяется на то, чтобы он относился (в т.ч. при помощи наследования) к baseClass при помощи Amm.is(). Если этого нет, то выбрасывается исключение.
* **defaults**: object - т.н. "опции по умолчанию", которые добавляются к options, если в options не установлены аналогичные ключи
* **setToDefaults**: boolean - устанавливать ли defaults экземпляру, если он был предоставлен вместо options
* **requirements**: если задан, экземпляр будет проверен на соответствие требованиям при помощи Amm.meetsRequirements(instance, requirements)

===== Amm.constructMany: function(manyOptions, baseClass, defaults, keyToProperty, setToDefaults, requirements) =====

Создает/конфигурирует/проверяет множество экземпляров при помощи Amm.constructInstance(). Может прописывать каждому экземпляру его ключ или индекс. Всегда возвращает массив (Array).

* **manyOptions**: object|Array
* **keyToProperty**: string
* **baseClass, defaults, setToDefaults, requirements** - см. Amm.constructInstance()

