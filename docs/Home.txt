Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.6
Creation-Date: 2020-09-08T15:35:04+03:00

====== Amm javascript framework ======
Created Tuesday 08 September 2020

"Amm" означает "Adapter Model Model", потому что изначальный план архитектуры был следующий:

Адаптер (представление) -> Модель интерфейса -> Модель данных

В ходе работы эти термины были заменены на 

View -> Elements & Traits -> Model

Целью разработки фреймворка было создать универсальное решение, при котором простые варианты не потребовали бы создания дополнительного javascript-кода, а сложные решения оставались возможными с его минимальным количеством. 

Сфера применения - от добавления "динамики" в небольшие диалоги до создания сложных диалоговых систем и одностраничных приложений (админки, чекауты, опросники, личные кабинеты).

При разработке я руководствовался следующими правилами:
* ECMA 5.1 (pre-2015) для максимальной совместимости (плюс я плохо знал ecma 2015, когда начинал делать Amm)
* jquery используется для работы с DOM (это может поменяться в следующих версиях)
* решение - код и структура - должно быть максимально банальным и очевидным, чтобы оставаться понятным и обслуживаемым
* функциональность и экономия времени конечного разработчика важнее, чем компактность и легкость фреймворка (поэтому он не компактный и не легкий)
* любой некорректный вызов приводит к исключению (fail early)

В Amm активно используется observer pattern. 

Связь между разными объектами осуществляется путем подписки на события.

Самое распространенное событие - это изменение свойства объекта (<propertyChange>).

Взаимодействие объектов осуществляется двумя способами:
* там, где роли взаимодействующих объектов известны заранее (например, в паре навык-представление, или в паре контейнер-содержимое) подписка на события и их обработка содержится в программном коде
* универсальное и гибкое средство связи объектов - выражения, позволяющие устанавливать значения свойств одних объектов в зависимости от значений свойств других, и реагирующие на изменения во всей промежуточной цепочке.

===== Идеология =====

==== Автономная модель интерфейса ====

Недостатком ряда виджетов на базе jQuery и множества других javascript-компонентов является то, что после создания экземпляр часто невозможно полноценно контролировать программно.

В Amm каждому виджету соответствует своя модель, - элемент, - которая содержит все необходимые свойства, методы и события. Элемент абстрактен и, в идеале, платформо-независим. Он представляет собой не только "пульт управления" виджетом, но и реализацию его логики, и может функционировать независимо от представления виджета.

То есть если я создаю элемент с навыком Select, то у меня уже есть список опций с возможностью одиночного и множественного выбора, даже если я не привязал этот элемент к html-элементу формы. Этот элемент будет корректно себя вести и генерировать необходимые события.

Точно также если я создаю элемент с навыком Input, у меня есть работающая комбинация value / readOnly / enabled.

Все виджеты в Amm реализуются именно так: вначале работающая внутренняя логика, затем представление, связывающее модель интерфейса с браузерным представлением, будь то dom или компонент третьей стороны.

==== Динамика и максимальная изменчивость (mutability) ====

Я сделал максимум для того, чтобы свойства и взаимоотношения элементов можно было динамически менять в ходе выполнения. Можно создавать элементы без представления, представление - без элементов. Можно перетасовывать элементы внутри иерархий принадлежности и представления. Можно динамически создавать, уничтожать и менять id элементов. Там, где это возможно, я старался, чтобы результат не зависел от того, в каком порядке мы осуществляем ведущие к нему действия. С объектами нужно играться и крутить их как угодно, нет "единого правильного пути".

==== Организация "снизу вверх" ====

Иерархия элементов, объединяющихся в компоненты, строится снизу вверх. Можно иметь множество элементов с повторяющимися id; они все равно могут адресовать своих соседей (в рамках предка) по идентификаторам. Элемент можно найти по узлу DOM, так как большинство представлений "отмечаются" в узлах DOM, к которым они привязаны.

==== Гибкость организации объектной структуры ====

У одного Element может быть несколько разных Traits и любое количество Views одновременно. Универсальная связь между Elements осуществляется, как правило, при помощи Expression. Те или иные Traits реализуют эффекивную логику, подписываясь на события участвующих элементов. Views подписываются на события своих Elements. Как правило, View требует, чтобы у элемента был тот или иной Trait, или, если состав Views известен при создании элемента, Traits будут назначены ему автоматически.

TODO: 
* гибкость навыков (traits)

===== Основы =====

* [[build|Структура файлов и сборка]] 
* [[basics|Особенности и плюсы использования простейшего подмножества ecmascript]]
* [[oop|Реализация ООП в Amm]] ([[oop]])
* [[events|События (events)]]
* [[properties|Свойства (properties)]]
* [[options|Объекты-опции (options)]]
* [[constructInstance|Стандартный способ создания объектов (Amm.constructInstance)]]
* [[dependency injection|Dependency injection при помощи Amm.constructInstance и Amm.override]]

===== Ключевые классы =====

* Элемент (Element)
* Навык (Trait)
* Представление (View)
* Модель данных и запись (Data.Model, Data.Record), метаданные (Data.FieldMeta)
* Взаимодействие с сервером (Remote)

===== Вспомогательные классы =====

* Утилитарный класс (Amm)
* Поставщик событий ([[events|WithEvents]])
* Выражение (Expression)
* Строитель (Builder)
* Массив и коллекция (Array, Collection)
* Преобразователь массивов (ArrayMapper, Filter, Sorter, Instantiator)

===== Базовые Traits и Views =====

==== Базовые виджеты ====

* Visual - управление отображением; класс CSS; связь с DisplayParent'ом
* Content - вывод произвольного html-контента
* Input - поле ввода
* Toggle - radio или checkbox
* Select - выбор одного или нескольких элементов
* DisplayParent, StaticDisplayParent - контейнер с визуальными потомками
* Annotated

==== Работа с данными ====

* Field
* Form
* Data

==== Отображение коллекций ====

* Amm.View.Abstract.Collection, Amm.View.Html.Collection
* Trait.Instantiator
* Trait.Repeater
